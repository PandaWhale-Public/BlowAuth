This is the documentation for BlowAuth, an OAuth 1.0 consumer library by
PandaWhale, Inc.


Git Repo
====================
You can pull the latest development version using git:
git clone git@github.com:PandaWhale-Public/BlowAuth.git


Why BlowAuth?
====================
There some well-known OAuth implementations that are already available, but we
wanted to make one which focused mainly on implementing the OAuth spec itself,
without any assumptions about the platform. We want to keep the core library
focused on handling only the construction of OAuth requests, and add support
for particular platforms via child classes. The project is very young, but it
looks like OAuth is here to stay, and we want to give developers a general-
purpose tool for integrating with any and every OAuth provider out there!


Flow Overview
====================
1) Create a BlowAuth object by instantiating from a child class (LinkedInOAuth,
   TwitterOAuth, etc.) using your *consumer key* and *consumer secret key* which
   you get from the provider.

2) Get a *request token* (temporary credentials) from the OAuth provider. Store
   these credentials in a session or an encrypted cookie so you can use them
   when the user is redirected back.

3) Redirect the user to the *authorize URL*, optionally providing an
   *oauth_callback* to redirect the user to your app (and possibly
   to carry back some state information in the GET params).

4) User authorizes your app, and is redirected back to it. If you did not
   specify a callback in (3), then the user will be given a number which may
   be used for authentication (not recommended -- callbacks FTW). The redirect
   URL will have a GET param which gives you the  *oauth verifier*. 

5) Instantiate another object from your BlowAuth child class. Use not only your
   consumer key and consumer secret (as you did previously), but also use the
   oauth token and oauth token secret.
   
6) Use the oauth verifier you got in (4) to fetch an *access token*. The access
   token is a set of credentials given by the provider which contains both an
   oauth token and an oauth token secret. These carry more privileges than the
   ones you got in the request token. Again, store these in a session or in an
   encrypted cookie as you will use them to sign your API calls to demonstrate
   that you are authorized by the user.

7) Instantiate another BlowAuth-descended object using your client credentials
   (consumer key, consumer secret) and the oauth token + oauth token secret you
   got in the access token in (6).

8) Query the platform API to your heart's content!


Supporting New OAuth Providers
====================
1) Create a new class that extends BlowAuth. LinkedInOAuth.php provides an
   example of this. Basically you just need to provide values for the
   URLs that correspond to the various OAuth method's for the provider
   in question (request_token, authorize, etc.).

2) There is no step 2! However, if you wish to have some platform-specific
   API abstraction/tools, these child classes are a good place to put it.
